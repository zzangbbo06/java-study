참조란? 그 데이터가 저장된 위치를 가리키고 있는 것
Person p1 = new Person();  // 새로운 객체 생성, p1은 객체 주소를 참조
p1은 ‘참조 변수(reference variable)’
Person p2 = p1;            // p2도 같은 객체 주소를 참조
p1.name = "철수";
System.out.println(p2.name);  // "철수", 같은 객체를 참조하니까\
		
객체는 집이고, 참조 변수는 그 집의 주소가 적힌 편지함 같은 것



클래스를 가지고 실제로 만든 "객체" = 인스턴스
		
//		//		객체란? 프로그램에서 **데이터(속성)**와 **기능(동작)**
//		
////				클래스’는 객체를 만들기 위한 설계도
////				‘객체’는 그 설계도로 찍어낸 실제 제품
////				예를 들어, 클래스 ‘사람’이 있다면,
////				실제 한 명 한 명이 ‘객체’인 거죠.
//		
////		속성(필드, 변수): 객체가 가진 정보(예: 사람의 이름, 나이)
////		행동(메서드): 객체가 할 수 있는 일(예: 자동차가 달리다, 사람 걷다)
//		
////		두 개의 주소가 같다는 건 두 변수가 같은 객체를 가리키고 있다
//		// 해시코드가 같은 객체들을 담아놓은게 버킷이고
//		// 해시코드를 이용해서 객체를 찾고 그안에 객체 자체의 주소와 내용들은 equals로 비교, 해시코드만 있으면 중복 발생
//		// hashCode()는 객체 내용을 숫자로 요약한 값
//		
////		equals()는 책 내용 비교
////
////		hashCode()는 책의 ‘분류 번호’(예: 도서관에서 사용하는 번호)
////
////		내용이 다르면 당연히 분류 번호도 달라지게 설계되어 있어요.
////
////		분류 번호도 다르고 내용도 다르면 완전히 다른 책인 거죠.



return -> 반복문 아닐때는 어떻게 되는지 다시 공부